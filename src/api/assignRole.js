module.exports = (app, bot) => {
    app.post('/updateLeaderboard', async (req, res) => {
        const { guildId, leaderboard } = req.body;

        if (!guildId || !leaderboard || !Array.isArray(leaderboard)) {
            return res.status(400).send('Datos inv√°lidos: Se requiere guildId y leaderboard.');
        }

        try {
            const guild = await bot.guilds.fetch(guildId);

            // Iterar por cada posici√≥n en el leaderboard
            for (let i = 0; i < leaderboard.length; i++) {
                const userId = leaderboard[i].userId;
                const position = i + 1; // Posici√≥n en el leaderboard

                const member = await guild.members.fetch(userId);
                let role;

                // Asignar roles seg√∫n la posici√≥n
                if (position === 1) {
                    role = guild.roles.cache.find(r => r.name === 'ü•á L√≠der');
                } else if (position === 2) {
                    role = guild.roles.cache.find(r => r.name === 'ü•à Subcampe√≥n');
                } else if (position === 3) {
                    role = guild.roles.cache.find(r => r.name === 'ü•â Tercer Lugar');
                } else if (position <= 10) {
                    role = guild.roles.cache.find(r => r.name === '‚≠ê Finalista');
                } else {
                    role = guild.roles.cache.find(r => r.name === 'üí™ Participante Destacado');
                }

                if (role) {
                    // Elimina roles previos relacionados con el medallero antes de asignar el nuevo
                    const leaderboardRoles = ['ü•á L√≠der', 'ü•à Subcampe√≥n', 'ü•â Tercer Lugar', '‚≠ê Finalista', 'üí™ Participante Destacado'];
                    for (const r of leaderboardRoles) {
                        const existingRole = guild.roles.cache.find(role => role.name === r);
                        if (existingRole && member.roles.cache.has(existingRole.id)) {
                            await member.roles.remove(existingRole);
                        }
                    }

                    // Asignar el nuevo rol
                    await member.roles.add(role);
                    console.log(`Rol ${role.name} asignado a ${member.user.tag}`);
                }
            }

            res.status(200).send('Roles actualizados seg√∫n el medallero.');
        } catch (error) {
            console.error(error);
            res.status(500).send('Error actualizando el medallero.');
        }
    });
};
